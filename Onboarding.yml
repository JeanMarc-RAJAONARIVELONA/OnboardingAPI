openapi: "3.0.3"
info:
  title: On Boarding API
  description: STD22043
  contact:
    email: hei.jean.3@gmail.com
  version: "1.2"
servers:
  - url: https://STD22043.com
paths:
  /Student:
    get:
      responses:
        "200":
          description: your request was Successfull
          content:
            application/json:
              example:
                - id: 1
                  name: JeanMarc
                  email: hei.jean.3@gmail.com
                  birthdate: 2005-02-15
                - id: 2
                  name: Marc Jean
                  email: hei.marc@gmail.com
                  birthdate: 2003-06-05
    post:
      requestBody:
        description: Student object to be added
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                name:
                  type: string
                email:
                  type: string
                birthdate:
                  type: string
                  format: Date
              example:
                id: 4
                name: fictif person
                email: hei.test@gmail.com
                birthdate: 1998-07-25
      responses:
        "201":
          description: Student was add successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 4
                  name:
                    type: string
                    example: fictif person
                  email:
                    type: string
                    example: hei.test@gmail.com
                  birthdate:
                    type: string
                    format: date
                    example: "1998-07-25"
    put:
      requestBody:
        description: Student object to be updated
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                name:
                  type: string
                email:
                  type: string
                birthdate:
                  type: string
                  format: Date
              example:
                id: 4
                name: fictif person
                email: hei.test@gmail.com
                birthdate: 1998-07-25
      responses:
        "200":
          description: Student was updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 4
                  name:
                    type: string
                    example: fictif person
                  email:
                    type: string
                    example: hei.test@gmail.com
                  birthdate:
                    type: string
                    format: date
                    example: "1998-07-25"
    delete:
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Student was deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 4
                  name:
                    type: string
                    example: fictif person
                  email:
                    type: string
                    example: hei.test@gmail.com
                  birthdate:
                    type: string
                    format: date
                    example: "1998-07-25"
